{"version":3,"sources":["components/StatefulHello.tsx","registerServiceWorker.ts","index.tsx"],"names":["Hello","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onIncrement","updateEnthusiasm","state","currentEnthusiasm","onDecrement","enthusiasmLevel","numChars","name","Error","react","className","Array","join","onClick","setState","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","StatefulHello","document","getElementById","URL","process","toString","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+LA4CeA,qBA/BX,SAAAA,EAAYC,GAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACvBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAsBFQ,YAAc,kBAAMP,EAAKQ,iBAAiBR,EAAKS,MAAMC,kBAAoB,IAvBtDV,EAwBnBW,YAAc,kBAAMX,EAAKQ,iBAAiBR,EAAKS,MAAMC,kBAAoB,IAtB7EV,EAAKS,MAAQ,CAAEC,kBAAmBX,EAAMa,iBAAmB,GAFpCZ,wEAKX,IA4BSa,EA3BbC,EAASX,KAAKJ,MAAde,KAER,GAAIX,KAAKM,MAAMC,mBAAqB,EAChC,MAAM,IAAIK,MAAM,+CAGpB,OACIC,EAAA,qBAAKC,UAAU,SACXD,EAAA,qBAAKC,UAAU,YAAf,SACWH,GAkBED,EAlByBV,KAAKM,MAAMC,kBAmBtDQ,MAAML,EAAW,GAAGM,KAAK,OAjBpBH,EAAA,wBAAQI,QAASjB,KAAKQ,aAAtB,KACAK,EAAA,wBAAQI,QAASjB,KAAKI,aAAtB,+CAQaG,GACrBP,KAAKkB,SAAS,CAAEX,6BA5BJY,wBCDdC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfsB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC/EjEC,SACE7B,EAAA,cAAC8B,EAAD,CAAOhC,KAAK,aAAaF,gBAAiB,KAC1CmC,SAASC,eAAe,SDaX,WACb,GAA6C,kBAAmBjB,UAAW,CAMzE,GAJkB,IAAIkB,IACpBC,YACAzB,OAAOC,SAASyB,YAEJC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMJ,YAAN,sBAEP3B,GAmDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAvEAsB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBmC","file":"static/js/main.cf301fb1.chunk.js","sourcesContent":["import * as React from \"react\";\nimport './Hello.css';\n\nexport interface IProps {\n    name: string;\n    enthusiasmLevel?: number;\n}\n\ninterface IState {\n    currentEnthusiasm: number;\n}\n\nclass Hello extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = { currentEnthusiasm: props.enthusiasmLevel || 1 };\n    }\n\n    public render() {\n        const { name } = this.props;\n\n        if (this.state.currentEnthusiasm <= 0) {\n            throw new Error('You could be a little more enthusiastic. :D');\n        }\n\n        return (\n            <div className=\"hello\">\n                <div className=\"greeting\">\n                    Hello {name + getExclamationMarks(this.state.currentEnthusiasm)}\n                </div>\n                <button onClick={this.onDecrement}>-</button>\n                <button onClick={this.onIncrement}>+</button>\n            </div>\n        );\n    }\n\n    private onIncrement = () => this.updateEnthusiasm(this.state.currentEnthusiasm + 1);\n    private onDecrement = () => this.updateEnthusiasm(this.state.currentEnthusiasm - 1);\n\n    private updateEnthusiasm(currentEnthusiasm: number) {\n        this.setState({ currentEnthusiasm });\n    }\n}\n\nexport default Hello;\n\nfunction getExclamationMarks(numChars: number) {\n    return Array(numChars + 1).join('!');\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Hello from './components/StatefulHello';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <Hello name=\"TypeScript\" enthusiasmLevel={10} />,\n  document.getElementById('root') as HTMLElement\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}